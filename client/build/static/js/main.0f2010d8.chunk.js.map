{"version":3,"sources":["components/cleaning1.jpg","utils/auth.js","components/Header.js","components/Footer.js","components/Homepage.js","utils/queries.js","utils/mutations.js","components/CommentForm.js","components/CommentList.js","utils/localStorage.js","components/AddChoreForm.js","components/ChoreList.js","pages/Chores.js","pages/Signup.js","pages/Login.js","pages/CreateGroup.js","pages/MyGroup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Header","Auth","loggedIn","Sticky","Menu","style","backgroundColor","Container","Item","as","header","to","color","fontFamily","position","name","Image","src","showNav","Footer","className","background","textAlign","fontSize","height","Homepage","text","fontWeight","marginBottom","marginTop","Grid","columns","Row","Column","Button","Group","widths","size","onClick","logout","Background","content","QUERY_COMMENTS","gql","QUERY_ALL_CHORES","QUERY_ME","LOGIN","ADD_USER","CREATE_GROUP","JOIN_GROUP","ADD_CHORE","ADD_COMMENT","REMOVE_CHORE","CommentForm","props","useState","commentBody","setBody","useMutation","update","cache","addComment","data","comments","readQuery","query","writeQuery","e","console","error","me","handleFormSubmit","event","a","preventDefault","variables","Form","onSubmit","TextArea","onChange","target","value","CommentList","map","comment","key","_id","firstName","createdAt","removeChoreId","choreId","savedChoreIds","JSON","parse","updatedSavedChoreIds","filter","savedChoreId","stringify","AddChore","choreBody","useEffect","choreIdArr","length","addChore","choreData","chores","log","type","variant","ChoreList","removeChore","handleRemoveChore","Error","margin","chore","Field","List","Content","listStyle","display","Checkbox","label","Icon","Chores","useQuery","Signup","email","lastName","username","password","formState","setFormState","addUser","mutationResponse","login","handleChange","placeholder","control","Input","id","autoComplete","Login","JoinGroup","joinGroup","history","useHistory","icon","Label","pointing","autocomplete","push","CreateGroup","createGroup","groupName","groupPassword","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","exact","path","component","MyGroup","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0f2010d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cleaning1.95b7379a.jpg\";","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n\n  createGroup() {\n\n  }\n\n  joinGroup() {\n\n  }\n}\n\nexport default new AuthService();\n","import React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Container, Menu, Image, Sticky } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport Auth from \"../utils/auth\";\n\nexport default function Header() {\n  function showNav() {\n    if (Auth.loggedIn()) {\n      return (\n        <Sticky>\n          <Menu\n            style={{\n              backgroundColor: \"yellow\",\n            }}\n          >\n            <Container>\n              <Menu.Item as=\"a\" header>\n              <Link to=\"/\">\n                <h1\n                  style={{\n                    color: \"teal\",\n                    fontFamily: \"-moz-initial\"\n                  }}\n                >\n                  Honey Do List\n                </h1>\n              </Link>\n              </Menu.Item>\n              <Menu.Menu position=\"right\">\n                <Menu.Item as=\"a\" name=\"Tasks\">\n                  <Image src=\"https://img.icons8.com/cute-clipart/64/000000/task.png\" />\n                  <Link to=\"/chores\"\n                    style={{\n                      color: \"teal\",\n                      fontFamily: \"-moz-initial\"\n                    }}\n                  >Chores</Link>\n                </Menu.Item>\n                <Menu.Item as=\"a\" name=\"Shopping\">\n                  <Image src=\"https://img.icons8.com/color/48/000000/shopping-cart-loaded.png\" />\n                  <Link to=\"/\"\n                    style={{\n                      color: \"teal\",\n                      fontFamily: \"-moz-initial\"\n                    }}\n                  >Shopping</Link>\n                </Menu.Item>\n              </Menu.Menu>\n            </Container>\n          </Menu>\n        </Sticky>\n      );\n    } \n  }\n\n  return (\n    <>\n      {showNav()}\n    </>\n  );\n}","import React from 'react';\n\nexport default function Footer() {\n    return (\n        <footer className=\"\"\n        style={{\n          background: \"yellow\",\n          color: \"teal\",\n          textAlign: \"right\",\n          fontSize: \"18px\",\n          height: \"30px\"\n        }}>\n            <div className=\"\">\n                &copy;2020 Created By: Kiran Riaz, Christopher Short, DeAnna Martinez     \n            </div>\n        </footer>\n    );\n};","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport Auth from '../utils/auth';\n\nimport { Container, Button, Grid, Header } from \"semantic-ui-react\";\nimport { Link } from 'react-router-dom';\nimport Background from \"./cleaning1.jpg\";\n\nexport default function Homepage() {\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <>\n    <body\n      style={{\n        background: \"lightblue\",\n        height: \"700px\",\n      }}>\n        <Container text textAlign=\"center\">\n          <h2\n            style={{\n              fontSize: '2em',\n              fontWeight: 'bold',\n              marginBottom: '2em',\n              marginTop: '2em',\n              color: \"yellow\",\n              fontFamily: \"-moz-initial\"\n            }}\n          >Please make a selection.</h2>\n          <Grid columns={2}>\n            <Grid.Row>\n              <Grid.Column>\n                <Link to=\"/creategroup\">\n                  <Button.Group widths=\"2\">\n                    <Button\n                      color=\"teal\"\n                      size=\"huge\"\n                      style={{\n                        marginBottom: \"10em\",\n                        fontFamily: \"-moz-initial\"\n                      }}\n                    >Create A Group</Button>\n                  </Button.Group>\n                </Link>\n              </Grid.Column>\n              <Grid.Column>\n                <Link to=\"/mygroup\">\n                  <Button.Group widths=\"2\">\n                    <Button\n                      color=\"teal\"\n                      size=\"huge\"\n                      style={{\n                        marginBottom: \"10em\",\n                        fontFamily: \"-moz-initial\"\n                      }}\n                    >Go To My Group</Button>\n                  </Button.Group>\n                </Link>\n                </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n\n        <Container text textAlign=\"center\">\n          <Grid columns={1}>\n            <Grid.Row>\n              <Grid.Column>\n                <Link to=\"/\" onClick={() => Auth.logout()}>\n                  <Button.Group widths=\"1\">\n                    <Button\n                      color=\"teal\"\n                      size=\"huge\"\n                      style={{\n                        marginTop: \"5em\",\n                        marginBottom: \"3em\",\n                        fontFamily: \"-moz-initial\"\n                      }}\n                    >\n                      Logout\n                    </Button>\n                  </Button.Group>\n                </Link>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n        </body>\n      </>\n      );\n    } else {\n      return (\n        <>\n        <body\n          style={{\n          background:`url(${Background})`,\n          height: \"800px\",\n        }}>\n  <Container text textAlign='center'>\n    <Header\n      as='h1'\n      content='Honey Do List'\n      style={{\n        fontSize: '4em',\n        fontWeight: 'bold',\n        marginBottom: 0,\n        marginTop: '1em',\n        color: \"yellow\",\n        fontFamily: \"-moz-initial\"\n      }}\n    />\n    <Header\n      as='h2'\n      content='A simple and easy chore management application that allows the user to add chores to their list, comment on chores, and assign/invite others to accept a chore.'\n      style={{\n        fontSize: '1.7em',\n        fontWeight: 'normal',\n        marginTop: '1.5em',\n        marginBottom: '2em',\n        color: \"yellow\",\n        fontFamily: \"-moz-initial\"\n      }}\n    />\n    </Container>\n    <Container text textAlign='center'>\n            <Grid columns={2}>\n              <Grid.Row>\n                <Grid.Column>\n                  <Link to=\"/login\">\n                    <Button.Group widths=\"2\">\n                      <Button\n                        color=\"teal\"\n                        size=\"huge\"\n                        style={{\n                          marginBottom: \"10em\",\n                          fontFamily: \"-moz-initial\"\n                        }}\n                      >\n                        Login\n                      </Button>\n                    </Button.Group>\n                  </Link>\n                </Grid.Column>\n                <Grid.Column>\n                  <Link to=\"/signup\">\n                    <Button.Group widths=\"2\">\n                      <Button\n                        color=\"teal\"\n                        size=\"huge\"\n                        style={{\n                          marginBottom: \"10em\",\n                          fontFamily: \"-moz-initial\"\n                        }}\n                      >\n                        Signup\n                      </Button>\n                    </Button.Group>\n                  </Link>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Container>\n          </body>\n        </>\n      );\n    }\n  }\n\n  return (\n    <>\n \n      {showNavigation()}\n    </>\n  );\n}","import gql from \"graphql-tag\";\n\nexport const QUERY_COMMENTS = gql`\n  query comments {\n    comments {\n      _id\n      commentBody\n      createdAt\n      firstName\n    }\n  }\n`;\n\nexport const QUERY_COMMENT = gql`\n  query comment($id: ID!) {\n    comment(_id: $id) {\n      _id\n      commentBody\n      createdAt\n      username\n      reactions {\n        _id\n        createdAt\n        username\n        reactionBody\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_CHORES = gql`\n  query chores {\n    chores {\n      _id\n      choreBody\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      username\n      email\n      tasks {\n        _id\n        taskName\n      }\n      comments {\n        _id\n        commentBody\n      }\n    }\n  }\n`;\n\nexport const QUERY_GROUP = gql`\n  query group {\n    group {\n      _id\n      groupName\n      groupPassword\n    }\n}`\n\nexport const QUERY_ME = gql`\n  {\n    me {\n      _id\n      username\n      firstName\n      lastName\n      email\n      comments {\n        _id\n        commentBody\n        createdAt\n        reactions {\n          _id\n          createdAt\n          reactionBody\n          username\n        }\n      }\n      chores {\n        _id\n        choreBody\n      }\n    }\n  }\n`;\n\nexport const QUERY_ME_BASIC = gql`\n  {\n    me {\n      _id\n      username\n      firstName\n      lastName\n      email\n    }\n  }\n`;\n","import gql from \"graphql-tag\";\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $username: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      username: $username\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const CREATE_GROUP = gql`\n  mutation createGroup($groupName: String!, $groupPassword: String!) {\n    createGroup(groupName: $groupName, groupPassword: $groupPassword) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const JOIN_GROUP = gql`\n  mutation joinGroup($groupName: String!, $groupPassword: String!) {\n    joinGroup(groupName: $groupName, groupPassword: $groupPassword) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_REACTION = gql`\n  mutation addReaction($commentId: ID!, $commentBody: String!) {\n    addReaction(commentId: $commentId, commentBody: $commentBody) {\n      _id\n      reactions {\n        _id\n        reactionBody\n        createdAt\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_CHORE = gql`\n  mutation addChore($choreBody: String!) {\n    addChore(choreBody: $choreBody) {\n      _id\n      choreBody\n    }\n  }\n`;\n\nexport const ADD_COMMENT = gql`\n  mutation addComment($commentBody: String!) {\n    addComment(commentBody: $commentBody) {\n      _id\n      commentBody\n      firstName\n    }\n  }\n`;\n\nexport const REMOVE_CHORE = gql`\n  mutation removeChore($choreBody: String!) {\n    removeChore(choreBody: $choreBody) {\n      _id\n      choreBody\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ADD_COMMENT } from \"../utils/mutations\";\nimport { QUERY_COMMENTS, QUERY_ME } from \"../utils/queries\";\nimport { Container, Form, Button, Grid } from \"semantic-ui-react\";\n\nexport default function CommentForm(props) {\n  const [commentBody, setBody] = useState(\"\");\n  const [addComment] = useMutation(ADD_COMMENT, {\n    update(cache, { data: { addComment } }) {\n      try {\n        const { comments } = cache.readQuery({ query: QUERY_COMMENTS });\n        cache.writeQuery({\n          query: QUERY_COMMENTS,\n          data: { comments: [addComment, ...comments] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n      // append new comment to the end of the array\n      const { me } = cache.readQuery({ query: QUERY_ME });\n      cache.writeQuery({\n        query: QUERY_ME,\n        data: { me: { ...me, comments: [...me.comments, addComment] } },\n      });\n    },\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      // add comment to database\n      await addComment({\n        variables: { commentBody },\n      });\n\n      // clear form value\n      setBody(\"\");\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <body\n      style={{\n        background: \"lightblue\",\n        height: \"175px\",\n      }}\n    >\n      <Container>\n        <Grid columns={2} text textAlign=\"center\">\n          <Grid.Row>\n            <Grid.Column>\n              <Form onSubmit={handleFormSubmit}>\n                <Form.TextArea\n                  onChange={(event) => setBody(event.target.value)}\n                />\n                <Button\n                  color=\"teal\"\n                  size=\"medium\"\n                  style={{\n                    marginBottom: \"4em\",\n                    fontFamily: \"-moz-initial\",\n                  }}\n                >\n                  Comment\n                </Button>\n              </Form>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </body>\n  );\n}\n","import React from \"react\";\nimport { Container } from \"semantic-ui-react\";\n\nexport default function CommentList({ comments }) {\n  return (\n    <>\n      <Container>\n        {comments &&\n          comments.map((comment) => (\n            <div key={comment._id}>\n              <p>\n                {comment.firstName} commented on {comment.createdAt}\n              </p>\n              <p>\"{comment.commentBody}\"</p>\n              {/* <Comment>\n                <Comment.Actions>\n                  <Comment.Action>\n                    Reply\n                    <Form>\n                      <Form.TextArea />\n                      <Button\n                        content=\"Add Reply\"\n                        labelPosition=\"left\"\n                        icon=\"edit\"\n                        primary\n                      />\n                    </Form>\n                  </Comment.Action>\n                </Comment.Actions>\n              </Comment> */}\n              <br></br>\n            </div>\n          ))}\n      </Container>\n    </>\n  );\n}\n","export const getChoreIds = () => {\n    const savedChoreIds = localStorage.getItem('saved chores')\n    ? JSON.parse(localStorage.getItem('saved chores'))\n    : [];\n\n    return savedChoreIds;\n};\n\nexport const saveChoreIds = (choreIdArr) => {\n    if (choreIdArr.length) {\n        localStorage.setItem('saved chores', JSON.stringify(choreIdArr));\n    } else {\n        localStorage.removeItem('saved chores');\n    }\n};\n\nexport const removeChoreId = (choreId) => {\n    const  savedChoreIds = localStorage.getItem('saved chores')\n    ? JSON.parse(localStorage.getItem('saved chores'))\n    : null;\n\n    if (!savedChoreIds) {\n        return false;\n    }\n\n    const updatedSavedChoreIds = savedChoreIds?.filter((savedChoreId) => \n        savedChoreId !== choreId);\n        localStorage.setItem('saved chores', JSON.stringify(updatedSavedChoreIds));\n\n        return true;\n};","import React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ADD_CHORE } from \"../utils/mutations\";\nimport { QUERY_ALL_CHORES, QUERY_ME } from \"../utils/queries\";\nimport { Container, Form, Button, Grid } from \"semantic-ui-react\";\nimport { saveChoreIds, getChoreIds } from '../utils/localStorage';\n\nexport default function AddChore(props) {\n  const [choreBody, setBody] = useState('');\n\n  // create state to hold saved choreId values\n  const [savedChoreIds, setSavedChoreIds] = useState(getChoreIds());\n\n  // set up useEffect hook to save 'savedChoreIds' to list to localStorage on component unmount\n  useEffect(() => {\n    return () => saveChoreIds(savedChoreIds);\n  });\n\n  const [addChore] = useMutation(ADD_CHORE, {\n    update(cache, { choreData: { addChore } }) {\n      try {\n        const { chores } = cache.readQuery({ query: QUERY_ALL_CHORES });\n        cache.writeQuery({\n          query: QUERY_ALL_CHORES,\n          choreData: { chores: [addChore, ...chores] },\n        });\n      } catch (e) {\n        console.log(e);\n      }\n\n      // append new chore to the end of the array\n      const { me } = cache.readQuery({ query: QUERY_ME });\n      cache.writeQuery({\n        query: QUERY_ME,\n        choreData: { me: { ...me, chores: [...me.chores, addChore] } },\n      });\n    },\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      // add chore to database\n      await addChore({\n        variables: { choreBody },\n      });\n\n      // const { items } = await response.json();\n      // const choreData = items.map((chore) => ({\n      //   choreId: chore.id,\n      //   choreBody: chore.choreBody\n      // }));\n\n      // clear form value\n      setBody(\"\");\n    } catch (e) {\n      console.log(e);\n    }\n\n    console.log(\"Chore: \", choreBody );\n  };\n\n  return (\n    <Container>\n      <Grid columns={2} text textAlign=\"center\">\n        <Grid.Row>\n          <Grid.Column>\n            <Form onSubmit={handleFormSubmit}>\n              <Form.TextArea\n                onChange={(event) => setBody(event.target.value)}\n              />\n              <Button\n                color=\"teal\"\n                size=\"medium\"\n                style={{\n                  marginBottom: \"4em\",\n                  fontFamily: \"-moz-initial\",\n                }}\n                type=\"submit\"\n                variant=\"success\"\n              >\n                Add Chore\n              </Button>\n            </Form>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport {\n  Form,\n  Checkbox,\n  List,\n  Container,\n  Icon,\n  Button,\n} from \"semantic-ui-react\";\nimport { REMOVE_CHORE } from \"../utils/mutations\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport Auth from \"../utils/auth\";\nimport { removeChoreId } from \"../utils/localStorage\";\nimport { QUERY_ME } from \"../utils/queries\";\n\nexport default function ChoreList({ chores }) {\n  const [removeChore, { error }] = useMutation(REMOVE_CHORE);\n  // const { data } = useQuery(QUERY_ME);\n  // const userData = data?.me || {};\n\n  const handleRemoveChore = async (choreId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeChore({\n        variables: { choreId },\n      });\n\n      console.log(data);\n\n      if (error) {\n        throw new Error(\"Cannot delete chore.\");\n      }\n\n      // upon success, remove chore from localStorage\n      removeChoreId(choreId);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n      <Container style={{ margin: \"15px\" }}>\n        {chores &&\n          chores.map((chore) => (\n            <div key={chore._id}>\n              <Form>\n                <Form.Field>\n                  <List>\n                    <List.Item>\n                      <List.Content>\n                        <ul style={{ listStyle: \"none\", display: \"block\" }}>\n                          <li style={{ margin: \"0 0 5px 0\" }}>\n                            {/* {chore.choreBody} */}\n                            <Checkbox label={chore.choreBody} />\n                            <Button\n                              onClick={() => handleRemoveChore(chore.choreId)}\n                            >\n                              <Icon name=\"trash\" />\n                            </Button>\n                          </li>\n                        </ul>\n                      </List.Content>\n                    </List.Item>\n                  </List>\n                </Form.Field>\n              </Form>\n            </div>\n          ))}\n      </Container>\n    </>\n  );\n}\n","import React from \"react\";\nimport { QUERY_COMMENTS, QUERY_ALL_CHORES } from \"../utils/queries\";\n// import { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport CommentForm from \"../components/CommentForm\";\nimport CommentList from \"../components/CommentList\";\nimport AddChoreForm from \"../components/AddChoreForm\";\nimport ChoreList from \"../components/ChoreList\";\n\nexport default function Chores(props) {\n  // get comment data\n  const { data } = useQuery(QUERY_COMMENTS);\n  const comments = data?.comments || [];\n  console.log(\"Comments: \", comments);\n\n  // get chore data\n  // const { chore: choreBody } = useParams();\n  // const { choreData } = useQuery(QUERY_ALL_CHORES, {\n  //   fetchPolicy: \"network-only\",\n  //   variables: { chore: choreBody }\n  // });\n  const { choreData } = useQuery(QUERY_ALL_CHORES);\n  const chores = choreData?.chores.choreBody || [];\n  console.log(\"Chores: \", chores);\n\n  return (\n    <>\n      <body\n        style={{\n          background: \"lightblue\",\n          height: \"1000px\",\n        }}\n      >\n        <ChoreList chores={chores} />\n        <br></br>\n        <AddChoreForm />\n        <CommentList comments={comments} />\n        <CommentForm />\n      </body>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\n// import { Link } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Form, Input, Button, Container } from \"semantic-ui-react\";\n\nexport default function Signup(props) {\n  const [formState, setFormState] = useState({\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    password: \"\",\n  });\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        username: formState.username,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <body\n    style={{\n      background: \"yellow\",\n      height: \"800px\",\n    }}>\n    <Container text textAlign=\"center\">\n      {/* <Link to=\"/login\">← Go to Login</Link> */}\n\n      <h2\n      style={{\n        color: \"teal\",\n        marginTop: '1.5em',\n        marginBottom: '2em',\n        fontSize: '1.7em',\n      }}\n      >Signup</h2>\n      <Form onSubmit={handleFormSubmit}>\n        <Form.Field\n          placeholder=\"First Name\"\n          control={Input}\n          label=\"First Name\"\n          id=\"form-input-control-first-name\"\n          onChange={handleChange}\n          autoComplete=\"on\"\n          name=\"firstName\"\n        />\n        <Form.Field\n          placeholder=\"Last Name\"\n          control={Input}\n          label=\"Last Name\"\n          id=\"form-input-control-last-name\"\n          onChange={handleChange}\n          autoComplete=\"on\"\n          name=\"lastName\"\n        />\n        <Form.Field\n          placeholder=\"Username\"\n          label=\"Username\"\n          control={Input}\n          id=\"Username\"\n          onChange={handleChange}\n          autoComplete=\"on\"\n          name=\"username\"\n        />\n        <Form.Field\n          placeholder=\"youremail@test.com\"\n          control={Input}\n          label=\"Email\"\n          id=\"form-input-control-error-email\"\n          onChange={handleChange}\n          autoComplete=\"on\"\n          name=\"email\"\n        />\n        <Form.Field\n          placeholder=\"must be at least 6 characters\"\n          label=\"Password\"\n          control={Input}\n          id=\"Password\"\n          onChange={handleChange}\n          autoComplete=\"on\"\n          type=\"password\"\n          name=\"password\"\n        />\n        <Button\n          type=\"submit\"          \n          color=\"teal\"\n          size=\"big\"\n          style={{\n            marginBottom: \"10em\",\n          }}\n        >\n          Signup\n        </Button>\n      </Form>\n      {error && <div>Sign up failed.</div>}\n    </Container>\n    </body>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Form, Input, Button, Container } from 'semantic-ui-react'\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n\n  return (\n    <body\n    style={{\n      background: \"yellow\",\n      height: \"800px\",\n    }}>\n    <Container text textAlign='center'>\n      <h2\n      style={{\n        color: \"teal\",\n        marginTop: '1.5em',\n        marginBottom: '2em',\n        fontSize: '1.7em',\n      }}\n      >Login</h2>\n      <Form onSubmit={handleFormSubmit}>\n          <Form.Field\n            placeholder=\"youremail@test.com\"\n            control={Input}\n            label=\"Email\"\n            id=\"form-input-control-error-email\"\n            onChange={handleChange}\n            autoComplete=\"on\"\n            name=\"email\"\n          />\n          <br></br>\n        <Form.Field\n            label=\"Password\"\n            control={Input}\n            id=\"Password\"\n            onChange={handleChange}\n            autoComplete=\"on\"\n            type=\"password\"\n            name=\"password\"\n          />\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n          <Button color='teal' size='big'\n            style={{\n            marginBottom: '10em'\n            }}\n            >\n            Login\n          </Button>\n      </Form>\n    </Container>\n    </body>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { JOIN_GROUP } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { Container, Button, Grid, Form, Input, Label } from \"semantic-ui-react\";\n\nexport default function JoinGroup(props) {\n  const [formState, setFormState] = useState({ email: \"\", password: \"\" });\n  const [joinGroup] = useMutation(JOIN_GROUP);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await joinGroup({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n      },\n    });\n    const token = mutationResponse.data.joinGroup.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const history = useHistory();\n\n  const routeChange = () => {\n    let path = \"mygroup\";\n    history.push(path);\n  };\n\n  return (\n    <>\n      <body\n        style={{\n          background: \"lightblue\",\n          height: \"700px\",\n        }}\n      >\n        <Container style={{ marginBottom: \"2em\" }} text textAlign=\"center\">\n          <h2\n            style={{\n              fontSize: \"2em\",\n              fontWeight: \"bold\",\n              marginBottom: \"1em\",\n              marginTop: \"2em\",\n              color: \"yellow\",\n              fontFamily: \"-moz-initial\",\n            }}\n          >\n            Create A Group\n          </h2>\n          <Grid columns={1} text textAlign=\"center\">\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Field>\n                  <Input\n                    icon=\"search\"\n                    placeholder=\"Smith Family\"\n                    type=\"text\"\n                    onChange={handleChange}\n                  />\n                  <Label pointing=\"left\">Type in your desired group name</Label>\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Field>\n                  <Form>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"Group Password\"\n                      autocomplete=\"on\"\n                    />\n                    <Label pointing=\"left\" type=\"password\">\n                      Group Password\n                    </Label>\n                  </Form>\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Grid columns={2} text textAlign=\"center\">\n            <Grid.Row>\n              <Grid.Column>\n                <Form onSubmit={handleFormSubmit}>\n                  <Form.Field>\n                    <Link to=\"/mygroup\">\n                      <Button.Group widths=\"1\">\n                        <Button\n                          color=\"teal\"\n                          size=\"huge\"\n                          style={{\n                            marginBottom: \"4em\",\n                            fontFamily: \"-moz-initial\",\n                          }}\n                          onClick={routeChange}\n                        >\n                          Submit\n                        </Button>\n                      </Button.Group>\n                    </Link>\n                  </Form.Field>\n                </Form>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </body>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Link } from \"react-router-dom\";\nimport { CREATE_GROUP } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { Container, Button, Grid, Form, Input, Label } from \"semantic-ui-react\";\n\nexport default function CreateGroup(props) {\n  const [formState, setFormState] = useState({ email: \"\", password: \"\" });\n  const [createGroup] = useMutation(CREATE_GROUP);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await createGroup({\n      variables: {\n        groupName: formState.groupName,\n        password: formState.groupPassword,\n      },\n    });\n    const token = mutationResponse.data.createGroup.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <>\n      <body\n        style={{\n          background: \"lightblue\",\n          height: \"700px\",\n        }}\n      >\n        <Container style={{ marginBottom: \"2em\" }} text textAlign=\"center\">\n          <h2\n            style={{\n              fontSize: \"2em\",\n              fontWeight: \"bold\",\n              marginBottom: \"1em\",\n              marginTop: \"2em\",\n              color: \"yellow\",\n              fontFamily: \"-moz-initial\",\n            }}\n          >\n            Search For My Group\n          </h2>\n          <Grid columns={1} text textAlign=\"center\">\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Field>\n                  <Input\n                    icon=\"search\"\n                    placeholder=\"Smith Family\"\n                    type=\"text\"\n                    onChange={handleChange}\n                    name=\"groupName\"\n                  />\n                  <Label pointing=\"left\">Type in your group name</Label>\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Field>\n                  <Input\n                    type=\"password\"\n                    placeholder=\"Group Password\"\n                    name=\"password\"\n                    autocomplete=\"on\"\n                  />\n                  <Label pointing=\"left\">Group Password</Label>\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Field>\n                  <Link to=\"/chores\">\n                    <Button.Group widths={1}>\n                      <Button\n                        color=\"teal\"\n                        size=\"huge\"\n                        style={{\n                          marginBottom: \"4em\",\n                          fontFamily: \"-moz-initial\",\n                        }}\n                        onClick={handleFormSubmit}\n                      >\n                        Submit\n                      </Button>\n                    </Button.Group>\n                  </Link>\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </body>\n    </>\n  );\n}\n","import ApolloClient from \"apollo-boost\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n// import { Provider } from \"react-redux\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Homepage from './components/Homepage';\nimport Chores from \"./pages/Chores\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/Login\";\nimport CreateGroup from \"./pages/CreateGroup\";\nimport MyGroup from \"./pages/MyGroup\";\n\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem(\"id_token\");\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    });\n  },\n  uri: \"http://localhost:3001/graphql\",\n});\n\nexport default function App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        {/* <div className=\"\"> */}\n          {/* <Provider> */}\n          <Header />\n          <div className=\"\">\n            <Switch>\n              <Route exact path=\"/\" component={Homepage} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/chores\" component={Chores} />\n              <Route exact path=\"/creategroup\" component={CreateGroup} />\n              <Route exact path=\"/mygroup\" component={MyGroup} />\n            </Switch>\n          </div>\n          <Footer />\n          {/* </Provider> */}\n        {/* </div> */}\n      </Router>\n    </ApolloProvider>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}